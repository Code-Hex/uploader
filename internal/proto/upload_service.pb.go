// Code generated by protoc-gen-go. DO NOT EDIT.
// source: upload_service.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type StatusCodeType int32

const (
	StatusCodeType_OK     StatusCodeType = 0
	StatusCodeType_Failed StatusCodeType = 1
)

var StatusCodeType_name = map[int32]string{
	0: "OK",
	1: "Failed",
}
var StatusCodeType_value = map[string]int32{
	"OK":     0,
	"Failed": 1,
}

func (x StatusCodeType) String() string {
	return proto.EnumName(StatusCodeType_name, int32(x))
}
func (StatusCodeType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_upload_service_bfebaf6c77b21abc, []int{0}
}

type ChunkType struct {
	Data                 []byte   `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChunkType) Reset()         { *m = ChunkType{} }
func (m *ChunkType) String() string { return proto.CompactTextString(m) }
func (*ChunkType) ProtoMessage()    {}
func (*ChunkType) Descriptor() ([]byte, []int) {
	return fileDescriptor_upload_service_bfebaf6c77b21abc, []int{0}
}
func (m *ChunkType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChunkType.Unmarshal(m, b)
}
func (m *ChunkType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChunkType.Marshal(b, m, deterministic)
}
func (dst *ChunkType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChunkType.Merge(dst, src)
}
func (m *ChunkType) XXX_Size() int {
	return xxx_messageInfo_ChunkType.Size(m)
}
func (m *ChunkType) XXX_DiscardUnknown() {
	xxx_messageInfo_ChunkType.DiscardUnknown(m)
}

var xxx_messageInfo_ChunkType proto.InternalMessageInfo

func (m *ChunkType) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type FileHeaderType struct {
	Name                 string                           `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Size                 int64                            `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	Header               []*FileHeaderType_MIMEHeaderType `protobuf:"bytes,3,rep,name=header,proto3" json:"header,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                         `json:"-"`
	XXX_unrecognized     []byte                           `json:"-"`
	XXX_sizecache        int32                            `json:"-"`
}

func (m *FileHeaderType) Reset()         { *m = FileHeaderType{} }
func (m *FileHeaderType) String() string { return proto.CompactTextString(m) }
func (*FileHeaderType) ProtoMessage()    {}
func (*FileHeaderType) Descriptor() ([]byte, []int) {
	return fileDescriptor_upload_service_bfebaf6c77b21abc, []int{1}
}
func (m *FileHeaderType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FileHeaderType.Unmarshal(m, b)
}
func (m *FileHeaderType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FileHeaderType.Marshal(b, m, deterministic)
}
func (dst *FileHeaderType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FileHeaderType.Merge(dst, src)
}
func (m *FileHeaderType) XXX_Size() int {
	return xxx_messageInfo_FileHeaderType.Size(m)
}
func (m *FileHeaderType) XXX_DiscardUnknown() {
	xxx_messageInfo_FileHeaderType.DiscardUnknown(m)
}

var xxx_messageInfo_FileHeaderType proto.InternalMessageInfo

func (m *FileHeaderType) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *FileHeaderType) GetSize() int64 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *FileHeaderType) GetHeader() []*FileHeaderType_MIMEHeaderType {
	if m != nil {
		return m.Header
	}
	return nil
}

type FileHeaderType_MIMEHeaderType struct {
	Key                  string   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Values               []string `protobuf:"bytes,2,rep,name=values,proto3" json:"values,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FileHeaderType_MIMEHeaderType) Reset()         { *m = FileHeaderType_MIMEHeaderType{} }
func (m *FileHeaderType_MIMEHeaderType) String() string { return proto.CompactTextString(m) }
func (*FileHeaderType_MIMEHeaderType) ProtoMessage()    {}
func (*FileHeaderType_MIMEHeaderType) Descriptor() ([]byte, []int) {
	return fileDescriptor_upload_service_bfebaf6c77b21abc, []int{1, 0}
}
func (m *FileHeaderType_MIMEHeaderType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FileHeaderType_MIMEHeaderType.Unmarshal(m, b)
}
func (m *FileHeaderType_MIMEHeaderType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FileHeaderType_MIMEHeaderType.Marshal(b, m, deterministic)
}
func (dst *FileHeaderType_MIMEHeaderType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FileHeaderType_MIMEHeaderType.Merge(dst, src)
}
func (m *FileHeaderType_MIMEHeaderType) XXX_Size() int {
	return xxx_messageInfo_FileHeaderType_MIMEHeaderType.Size(m)
}
func (m *FileHeaderType_MIMEHeaderType) XXX_DiscardUnknown() {
	xxx_messageInfo_FileHeaderType_MIMEHeaderType.DiscardUnknown(m)
}

var xxx_messageInfo_FileHeaderType_MIMEHeaderType proto.InternalMessageInfo

func (m *FileHeaderType_MIMEHeaderType) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *FileHeaderType_MIMEHeaderType) GetValues() []string {
	if m != nil {
		return m.Values
	}
	return nil
}

type FileRequestType struct {
	// Types that are valid to be assigned to File:
	//	*FileRequestType_Chunk
	//	*FileRequestType_Header
	File                 isFileRequestType_File `protobuf_oneof:"File"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *FileRequestType) Reset()         { *m = FileRequestType{} }
func (m *FileRequestType) String() string { return proto.CompactTextString(m) }
func (*FileRequestType) ProtoMessage()    {}
func (*FileRequestType) Descriptor() ([]byte, []int) {
	return fileDescriptor_upload_service_bfebaf6c77b21abc, []int{2}
}
func (m *FileRequestType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FileRequestType.Unmarshal(m, b)
}
func (m *FileRequestType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FileRequestType.Marshal(b, m, deterministic)
}
func (dst *FileRequestType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FileRequestType.Merge(dst, src)
}
func (m *FileRequestType) XXX_Size() int {
	return xxx_messageInfo_FileRequestType.Size(m)
}
func (m *FileRequestType) XXX_DiscardUnknown() {
	xxx_messageInfo_FileRequestType.DiscardUnknown(m)
}

var xxx_messageInfo_FileRequestType proto.InternalMessageInfo

type isFileRequestType_File interface {
	isFileRequestType_File()
}

type FileRequestType_Chunk struct {
	Chunk *ChunkType `protobuf:"bytes,1,opt,name=chunk,proto3,oneof"`
}
type FileRequestType_Header struct {
	Header *FileHeaderType `protobuf:"bytes,2,opt,name=header,proto3,oneof"`
}

func (*FileRequestType_Chunk) isFileRequestType_File()  {}
func (*FileRequestType_Header) isFileRequestType_File() {}

func (m *FileRequestType) GetFile() isFileRequestType_File {
	if m != nil {
		return m.File
	}
	return nil
}

func (m *FileRequestType) GetChunk() *ChunkType {
	if x, ok := m.GetFile().(*FileRequestType_Chunk); ok {
		return x.Chunk
	}
	return nil
}

func (m *FileRequestType) GetHeader() *FileHeaderType {
	if x, ok := m.GetFile().(*FileRequestType_Header); ok {
		return x.Header
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*FileRequestType) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _FileRequestType_OneofMarshaler, _FileRequestType_OneofUnmarshaler, _FileRequestType_OneofSizer, []interface{}{
		(*FileRequestType_Chunk)(nil),
		(*FileRequestType_Header)(nil),
	}
}

func _FileRequestType_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*FileRequestType)
	// File
	switch x := m.File.(type) {
	case *FileRequestType_Chunk:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Chunk); err != nil {
			return err
		}
	case *FileRequestType_Header:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Header); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("FileRequestType.File has unexpected type %T", x)
	}
	return nil
}

func _FileRequestType_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*FileRequestType)
	switch tag {
	case 1: // File.chunk
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ChunkType)
		err := b.DecodeMessage(msg)
		m.File = &FileRequestType_Chunk{msg}
		return true, err
	case 2: // File.header
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(FileHeaderType)
		err := b.DecodeMessage(msg)
		m.File = &FileRequestType_Header{msg}
		return true, err
	default:
		return false, nil
	}
}

func _FileRequestType_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*FileRequestType)
	// File
	switch x := m.File.(type) {
	case *FileRequestType_Chunk:
		s := proto.Size(x.Chunk)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *FileRequestType_Header:
		s := proto.Size(x.Header)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type ResultResponseType struct {
	Ok                   StatusCodeType `protobuf:"varint,1,opt,name=ok,proto3,enum=pb.StatusCodeType" json:"ok,omitempty"`
	ErrMsg               string         `protobuf:"bytes,2,opt,name=errMsg,proto3" json:"errMsg,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *ResultResponseType) Reset()         { *m = ResultResponseType{} }
func (m *ResultResponseType) String() string { return proto.CompactTextString(m) }
func (*ResultResponseType) ProtoMessage()    {}
func (*ResultResponseType) Descriptor() ([]byte, []int) {
	return fileDescriptor_upload_service_bfebaf6c77b21abc, []int{3}
}
func (m *ResultResponseType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResultResponseType.Unmarshal(m, b)
}
func (m *ResultResponseType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResultResponseType.Marshal(b, m, deterministic)
}
func (dst *ResultResponseType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResultResponseType.Merge(dst, src)
}
func (m *ResultResponseType) XXX_Size() int {
	return xxx_messageInfo_ResultResponseType.Size(m)
}
func (m *ResultResponseType) XXX_DiscardUnknown() {
	xxx_messageInfo_ResultResponseType.DiscardUnknown(m)
}

var xxx_messageInfo_ResultResponseType proto.InternalMessageInfo

func (m *ResultResponseType) GetOk() StatusCodeType {
	if m != nil {
		return m.Ok
	}
	return StatusCodeType_OK
}

func (m *ResultResponseType) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func init() {
	proto.RegisterType((*ChunkType)(nil), "pb.ChunkType")
	proto.RegisterType((*FileHeaderType)(nil), "pb.FileHeaderType")
	proto.RegisterType((*FileHeaderType_MIMEHeaderType)(nil), "pb.FileHeaderType.MIMEHeaderType")
	proto.RegisterType((*FileRequestType)(nil), "pb.FileRequestType")
	proto.RegisterType((*ResultResponseType)(nil), "pb.ResultResponseType")
	proto.RegisterEnum("pb.StatusCodeType", StatusCodeType_name, StatusCodeType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// FileUploaderClient is the client API for FileUploader service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FileUploaderClient interface {
	Upload(ctx context.Context, opts ...grpc.CallOption) (FileUploader_UploadClient, error)
}

type fileUploaderClient struct {
	cc *grpc.ClientConn
}

func NewFileUploaderClient(cc *grpc.ClientConn) FileUploaderClient {
	return &fileUploaderClient{cc}
}

func (c *fileUploaderClient) Upload(ctx context.Context, opts ...grpc.CallOption) (FileUploader_UploadClient, error) {
	stream, err := c.cc.NewStream(ctx, &_FileUploader_serviceDesc.Streams[0], "/pb.FileUploader/Upload", opts...)
	if err != nil {
		return nil, err
	}
	x := &fileUploaderUploadClient{stream}
	return x, nil
}

type FileUploader_UploadClient interface {
	Send(*FileRequestType) error
	CloseAndRecv() (*ResultResponseType, error)
	grpc.ClientStream
}

type fileUploaderUploadClient struct {
	grpc.ClientStream
}

func (x *fileUploaderUploadClient) Send(m *FileRequestType) error {
	return x.ClientStream.SendMsg(m)
}

func (x *fileUploaderUploadClient) CloseAndRecv() (*ResultResponseType, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ResultResponseType)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FileUploaderServer is the server API for FileUploader service.
type FileUploaderServer interface {
	Upload(FileUploader_UploadServer) error
}

func RegisterFileUploaderServer(s *grpc.Server, srv FileUploaderServer) {
	s.RegisterService(&_FileUploader_serviceDesc, srv)
}

func _FileUploader_Upload_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FileUploaderServer).Upload(&fileUploaderUploadServer{stream})
}

type FileUploader_UploadServer interface {
	SendAndClose(*ResultResponseType) error
	Recv() (*FileRequestType, error)
	grpc.ServerStream
}

type fileUploaderUploadServer struct {
	grpc.ServerStream
}

func (x *fileUploaderUploadServer) SendAndClose(m *ResultResponseType) error {
	return x.ServerStream.SendMsg(m)
}

func (x *fileUploaderUploadServer) Recv() (*FileRequestType, error) {
	m := new(FileRequestType)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _FileUploader_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.FileUploader",
	HandlerType: (*FileUploaderServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Upload",
			Handler:       _FileUploader_Upload_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "upload_service.proto",
}

func init() {
	proto.RegisterFile("upload_service.proto", fileDescriptor_upload_service_bfebaf6c77b21abc)
}

var fileDescriptor_upload_service_bfebaf6c77b21abc = []byte{
	// 344 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x52, 0x41, 0x4b, 0xf3, 0x40,
	0x14, 0x4c, 0x36, 0xfd, 0x02, 0x79, 0xed, 0x17, 0xcb, 0x2a, 0x25, 0xf4, 0x62, 0x0c, 0x0a, 0x41,
	0x24, 0x87, 0x7a, 0xd2, 0xa3, 0xc5, 0xd2, 0x22, 0x45, 0x59, 0xf5, 0x2c, 0xdb, 0xe6, 0x61, 0x43,
	0x63, 0x36, 0x66, 0x93, 0x42, 0xfd, 0x53, 0xfe, 0x45, 0xd9, 0x4d, 0x5a, 0x0d, 0xbd, 0xcd, 0xdb,
	0x99, 0xd9, 0x99, 0xb7, 0x09, 0x9c, 0x54, 0x79, 0x2a, 0x78, 0xfc, 0x26, 0xb1, 0xd8, 0x24, 0x4b,
	0x8c, 0xf2, 0x42, 0x94, 0x82, 0x92, 0x7c, 0x11, 0x9c, 0x82, 0x33, 0x5e, 0x55, 0xd9, 0xfa, 0x65,
	0x9b, 0x23, 0xa5, 0xd0, 0x89, 0x79, 0xc9, 0x3d, 0xd3, 0x37, 0xc3, 0x1e, 0xd3, 0x38, 0xf8, 0x36,
	0xc1, 0x9d, 0x24, 0x29, 0x4e, 0x91, 0xc7, 0x58, 0xec, 0x64, 0x19, 0xff, 0x40, 0x2d, 0x73, 0x98,
	0xc6, 0xea, 0x4c, 0x26, 0x5f, 0xe8, 0x11, 0xdf, 0x0c, 0x2d, 0xa6, 0x31, 0xbd, 0x01, 0x7b, 0xa5,
	0x5d, 0x9e, 0xe5, 0x5b, 0x61, 0x77, 0x74, 0x16, 0xe5, 0x8b, 0xa8, 0x7d, 0x57, 0x34, 0x9f, 0xcd,
	0xef, 0x7f, 0x47, 0xd6, 0x18, 0x86, 0xb7, 0xe0, 0xb6, 0x19, 0xda, 0x07, 0x6b, 0x8d, 0xdb, 0x26,
	0x53, 0x41, 0x3a, 0x00, 0x7b, 0xc3, 0xd3, 0x0a, 0xa5, 0x47, 0x7c, 0x2b, 0x74, 0x58, 0x33, 0x05,
	0x19, 0x1c, 0xa9, 0x10, 0x86, 0x9f, 0x15, 0xca, 0x52, 0x9b, 0x2f, 0xe0, 0xdf, 0x52, 0x6d, 0xa9,
	0xed, 0xdd, 0xd1, 0x7f, 0x55, 0x64, 0xbf, 0xf6, 0xd4, 0x60, 0x35, 0x4b, 0xaf, 0xf6, 0x85, 0x89,
	0xd6, 0xd1, 0xc3, 0xc2, 0x53, 0x63, 0xd7, 0xf1, 0xce, 0x86, 0x8e, 0xe2, 0x82, 0x27, 0xa0, 0x0c,
	0x65, 0x95, 0x96, 0x0c, 0x65, 0x2e, 0x32, 0x89, 0x3a, 0x32, 0x00, 0x22, 0xea, 0x3c, 0xb7, 0xbe,
	0xe7, 0xb9, 0xe4, 0x65, 0x25, 0xc7, 0x22, 0xd6, 0x3c, 0x23, 0x62, 0xad, 0x36, 0xc0, 0xa2, 0x98,
	0xcb, 0x77, 0x9d, 0xe7, 0xb0, 0x66, 0xba, 0x3c, 0x07, 0xb7, 0xad, 0xa6, 0x36, 0x90, 0xc7, 0x87,
	0xbe, 0x41, 0x01, 0xec, 0x09, 0x4f, 0x52, 0x8c, 0xfb, 0xe6, 0x68, 0x06, 0x3d, 0x95, 0xff, 0xaa,
	0x3f, 0x2d, 0x16, 0xea, 0xb9, 0x6b, 0x4c, 0x8f, 0x77, 0xbd, 0xff, 0xbc, 0xc1, 0x70, 0xa0, 0x0e,
	0x0f, 0x8b, 0x06, 0x46, 0x68, 0x2e, 0x6c, 0xfd, 0x43, 0x5c, 0xff, 0x04, 0x00, 0x00, 0xff, 0xff,
	0xe8, 0x04, 0xe5, 0xd5, 0x28, 0x02, 0x00, 0x00,
}
